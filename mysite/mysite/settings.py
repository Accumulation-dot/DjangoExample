"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q_kbh%$v4i6^_8mg6)$1)^wxbz^^3d)p-!^zkue=4+s=(_kah7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp.apps.MyappConfig',
    'app01.apps.App01Config',
    'rest_framework',
]

MIDDLEWARE = [
    # 'django.middleware.cache.UpdateCacheMiddleware',  # +
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware'  # +
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # mysql 驱动
        'NAME': 'my_site',  # 你的数据库名称
        'USER': 'developer1',  # 你的数据库用户名
        'PASSWORD': 'ZXcV1357@$^*90',  # 你的数据库密码
        'HOST': '127.0.0.1',  # 你的数据库主机，留空默认为localhost
        'PORT': '3306',  # 你的数据库端口
    }
}

# Caches
# 使用redis进行缓存

CACHES = {
    'default': {
        # 缓存后台使用的引擎
        'BACKEND': 'django_redis.cache.RedisCache',
        # 指定缓存的ip地址和端口
        'LOCATION': ['redis://127.0.0.1:6379/0'],
        # 前缀
        # 'KEY_PREFIX': 'dr',
        #
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            # password
            # 'PASSWORD': ''
            'CONNECTION_POOL_KWARGS': {'max_connections': 128, },
            # 压缩
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
        }
    },
    'mobile': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': ['redis://127.0.0.1:6379/1'],
        # 前缀
        # 'KEY_PREFIX': 'dr',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 128,
            },
            # 压缩
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            # redis password
            # 'PASSWORD': '1qaz2wsx',
        },
    }
}  # +

# JWT

TEST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # 必须
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    )
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=30),
}

# SESSION backend
SESSION_ENGINE = "django.contrib.sessions.backends.cache"  # +
SESSION_CACHE_ALIAS = "default"  # +

REST_FRAMEWORK_EXTENSIONS = {
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
}  # +

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# 语言和时区的默认
# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'
# 更改语言为中文
LANGUAGE_CODE = 'zh-hans'
# 更改时区
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'


LOG_PATH = os.path.join(BASE_DIR, 'log')
if not os.path.join(LOG_PATH):
    os.mkdir(LOG_PATH)
